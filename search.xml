<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新的开始</title>
      <link href="/2023/08/04/new-start/"/>
      <url>/2023/08/04/new-start/</url>
      
        <content type="html"><![CDATA[<p>一下鸽了一年半</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>在博客根目录下打开 git bash ，以下操作都在该终端：</p><ul><li><p>新建博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new post <span class="token string">"article title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>source\_posts</code> 中会生成以 article title 为名的文件夹，以及同名的 markdown 文件，对应资源文件位置和文章</p></li><li><p>生成静态网页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地预览</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以在 <a href="http://localhost:4000/">http://localhost:4000/</a> 中打开</p></li><li><p>上传 github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="功能实验"><a href="#功能实验" class="headerlink" title="功能实验"></a>功能实验</h2><h3 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h3><img src="test1.jpg" alt="jpg test"  /><img src="test2.gif" alt="gif test"  /><img src="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="web test" /><h3 id="音频测试"><a href="#音频测试" class="headerlink" title="音频测试"></a>音频测试</h3><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=419594177&auto=0&height=66"></iframe></div><h3 id="公式测试"><a href="#公式测试" class="headerlink" title="公式测试"></a>公式测试</h3><p>用<code>$ $</code>包裹的公式是靠左对齐，如 $\alpha + \beta$，用<code>$$ $$</code>包裹的是居中对齐</p><p>$$<br>\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg)<br>$$</p><p>$$<br>\prod_{n=1}^5\sum_{i = 1}^n\frac{1}{i^2}<br>$$</p><p>$$<br>y=<br>\begin{cases}<br>-x, \quad x\leq 0\\<br>x,\quad x&gt;0<br>\end {cases}<br>\tag{1}<br>$$</p><p>$a=\begin{bmatrix}1\\2\\3\end{bmatrix}$<br>$a=\left( \begin{matrix}1\\2\\3\end{matrix} \right)$</p><p>$$<br>\begin {bmatrix}<br>1 &amp; 2 &amp; 3 \\<br>2 &amp; 4 &amp; 6 \\<br>3 &amp; 6 &amp; 9<br>\end {bmatrix}<br>\tag{2}<br>$$</p><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> os <span class="token keyword">import</span> path<span class="token keyword">def</span> <span class="token function">check_for_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Does file exist:"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"data.csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    check_for_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h2><h3 id="资源失效"><a href="#资源失效" class="headerlink" title="资源失效"></a>资源失效</h3><p>发现无论是在 github.io 还是在本地，首页加载速度都很慢<br><img src="error1.png" alt="console error"  /><br>在 console 报错载入资源失败<br>定位到</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/typed.js@2.0.11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">     <span class="token keyword">var</span> typed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Typed</span><span class="token punctuation">(</span><span class="token string">"#subtitle"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">strings</span><span class="token operator">:</span> <span class="token punctuation">[</span>                             <span class="token string">"Calculating Calculating Calculating..."</span><span class="token punctuation">,</span>                            <span class="token string">"Calculating Calculating Calculating..."</span><span class="token punctuation">,</span>                            <span class="token string">"Calculation complete"</span><span class="token punctuation">,</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">startDelay</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>        <span class="token literal-property property">typeSpeed</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token literal-property property">loop</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token literal-property property">backSpeed</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>        <span class="token literal-property property">showCursor</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是一个显示动态打字效果的库，现在无法使用<br>在 <a href="https://mattboldt.github.io/typed.js/docs/">https://mattboldt.github.io/typed.js/docs/</a> 中发现 cdn 地址变成了</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/typed.js@2.0.16/dist/typed.umd.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>themes\hexo-theme-matery\layout\_partial\bg-cover-content.ejs</code> 中替换它了之后，资源加载就正常了，不需要再在各个 <code>index.html</code> 中一一替换</p><h3 id="数学公式显示"><a href="#数学公式显示" class="headerlink" title="数学公式显示"></a>数学公式显示</h3><ul><li><p>开启 mathjax<br>使用 mathjax 渲染Tex/LaTex数学公式</p><p>在 <code>themes\hexo-theme-matery\layout\post.ejs</code> 中添加</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并在 theme 中（如 <code>themes\hexo-theme-matery\_config.yml</code>）开启 mathjax 功能，并在每篇 post 开头开启 mathjax 功能</p></li><li><p>避免冲突<br>为了不和代码高亮冲突，不安装 <code>kramed</code> 插件，直接使用原本自带的 <code>marked</code> 插件<br>由于 markdown 语法与 mathjax 语法存在冲突<br>（比如 markdown 中用 <code>_</code> 表示_斜体_，但是 Latex 中表示脚标，Hexo渲染 markdown 时会把 <code>_</code> 强制渲染成 <code>&lt;em&gt;</code> ；<br>比如 markdown 中用 <code>\\</code> 表示单斜杠\\，但是 Latex 中表示换行）</p></li><li><p>回退版本<br>所以还需要修改源文件，但是为了和网上过时的教程同步，先将 <code>hexo-renderer-marked</code> 退回2018年的1.0.0：<br>在 blog 文件夹：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-renderer-marked<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked@1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改规则<br>在 <code>node_modules\marked\lib\marked.js</code> 中第539行改成</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">escape: /^\\([!"#$&amp;'()*+,\-./:;&lt;=>?@\[\]^_`|~])/,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第564行改成</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">inline._escapes = /\\([!"#$&amp;'()*+,\-./:;&lt;=>?@\[\]^_`|~])/g;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样 <code>marked</code> 就可以正确翻译 markdown 中的 <code>\\</code> 为 <code>\\</code> 而非 <code>\</code> ，从而 mathjax 得以正确按照 Latex 语法渲染公式</p><p>同理在 <code>node_modules\marked\lib\marked.js</code> 中第606行改成</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不知道第552行要不要修改，这样就可以正确翻译 <code>_</code></p></li><li><p>特殊注意<br>如果公式中有很多括号和斜杠连续出现，最好用空格把它们分割开来<br>参考<br><a href="https://zhuanlan.zhihu.com/p/476601594?utm_id=0">https://zhuanlan.zhihu.com/p/476601594?utm_id=0</a><br><a href="https://www.jianshu.com/p/16b7ef2653de">https://www.jianshu.com/p/16b7ef2653de</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> how-to系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动健康打卡</title>
      <link href="/2022/02/12/auto-report/"/>
      <url>/2022/02/12/auto-report/</url>
      
        <content type="html"><![CDATA[<h1 id="自动健康打卡"><a href="#自动健康打卡" class="headerlink" title="自动健康打卡"></a>自动健康打卡</h1><h2 id="先跑起来"><a href="#先跑起来" class="headerlink" title="先跑起来"></a>先跑起来</h2><p>基于Github仓库：<a href="https://github.com/xbb1973/USTC-ncov-AutoReport">https://github.com/xbb1973/USTC-ncov-AutoReport</a></p><p>fork别人的仓库然后改改配置文件，然后通过Github的actions功能实现定时打卡<br>十分钟完事了<br>结果workflows在登录那一步就失败了：</p><img src="1.png" alt="login failed"><p>原来这个版本不能识别验证码，而它的workflows是在github提供的ubuntu虚拟机上跑的，在校外网络环境登录时必须填写验证码</p><p>可以使用自己的运行器跑，正好学校vlab提供了ubuntu虚拟机，并且是校内网络环境，不需要填验证码…………</p><p>但是为什么不自己在虚拟机上写一个python自动打卡程序呢？或者找个办法识别验证码</p><p>找到了另一个人在原先版本上做出的改进：<a href="https://github.com/Kobe972/USTC-ncov-AutoReport">https://github.com/Kobe972/USTC-ncov-AutoReport</a> 因为网站的验证码比较简单，所以直接调用pytesseract库，就能识别验证码了</p><p>虽然能登录进去了，但是不能成功打卡。如图：检验上次打卡时间可知</p><img src="3.jpg" alt="report failed"><p>最后发现是data格式问题，每次健康上报时提交的信息参数就是data.json，但是原版本和现在版本的内容并不一样</p><p>原版本data.json<br><img src="4.jpg" alt="pre data"><br>按照这个版本上报并不能成功</p><p>在浏览器里点击确认上报，通过F12开发者工具抓包，点击抓到的 daliy_report 请求，在 Headers 下面找到 Form Data<br><img src="5.jpg" alt="post data"><br>按照这个格式修改data.json就可以了<br><img src="6.jpg" alt="success"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>作为刚学python的人，通过这个案例来学习再好不过了吧<br>（注：以下内容与源文件并不一定一致）<br>python的强大之处在于有很多厉害的库，可以让我们轻松地实现复杂的功能，下面将介绍一些用到的库：</p><h3 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h3><p><a href="https://docs.python-requests.org/zh_CN/latest/index.html">https://docs.python-requests.org/zh_CN/latest/index.html</a></p><p>它是很易用的HTTP库，可以简便地完成HTTP请求</p><h4 id="实现HTTP请求："><a href="#实现HTTP请求：" class="headerlink" title="实现HTTP请求："></a>实现HTTP请求：</h4><p><strong>get</strong>： 主要用于向指定的URL请求资源（资源文件或是数据均可）， 可以带参数也可以不带参数， 带参数时，参数是明文传递，你可以在浏览器的地址栏中看到参数名及参数值，get安全性不高，所以常用于安全性要求低的场合， 比如登录后请求数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com/events'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就获得了github的公共时间线，从这个名为 r 的 Response 对象中可以获取所有我们想要的信息</p><p>比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会以文本的形式读取服务器响应的内容<br>Requests 会自动解码来自服务器的内容。请求发出后，Requests 会基于 HTTP 头部对响应的编码作出有根据的推测。当你访问 r.text 之时，Requests 会使用其推测的文本编码<br>可以使用<code>r.encoding</code>来查看或修改当前编码模式</p><p>又如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOtext<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://passport.ustc.edu.cn/validatecode.jsp?type=login'</span><span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentimage<span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>.content 会以二进制形式读取服务器响应的内容<br>然后可以调用PIL库的Image和io库的BytesIO，以图片形式打开这个二进制串，获取登录的验证码图片</p><p><strong>post</strong>：主要是向指定的URL提交数据, 通常用于表单发送，psot所传递的数据或参数不是已明文形式存在的，而是封装后的，因此相对安全系数高，像注册、登录、提交表单都是用该方法实现的。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'model'</span><span class="token punctuation">:</span> <span class="token string">'uplogin.jsp'</span><span class="token punctuation">,</span>        <span class="token string">'service'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>service<span class="token punctuation">,</span>        <span class="token string">'warn'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'showCode'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>stuid<span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'button'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'CAS_LT'</span><span class="token punctuation">:</span>CAS_LT<span class="token punctuation">,</span>        <span class="token string">'LT'</span><span class="token punctuation">:</span>LT        <span class="token punctuation">&#125;</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://passport.ustc.edu.cn/login'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上就将表单payload的内容发送给了ustc登录界面</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'authority'</span><span class="token punctuation">:</span> <span class="token string">'weixine.ustc.edu.cn'</span><span class="token punctuation">,</span>            <span class="token string">'origin'</span><span class="token punctuation">:</span> <span class="token string">'https://weixine.ustc.edu.cn'</span><span class="token punctuation">,</span>            <span class="token string">'upgrade-insecure-requests'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>            <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>            <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36'</span><span class="token punctuation">,</span>            <span class="token string">'accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span><span class="token punctuation">,</span>            <span class="token string">'referer'</span><span class="token punctuation">:</span> <span class="token string">'https://weixine.ustc.edu.cn/2020/'</span><span class="token punctuation">,</span>            <span class="token string">'accept-language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'close'</span><span class="token punctuation">,</span>            <span class="token string">'cookie'</span><span class="token punctuation">:</span> <span class="token string">"PHPSESSID="</span> <span class="token operator">+</span> login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PHPSESSID"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";XSRF-TOKEN="</span> <span class="token operator">+</span> login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"XSRF-TOKEN"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";laravel_session="</span><span class="token operator">+</span>login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"laravel_session"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>url <span class="token operator">=</span> <span class="token string">"https://weixine.ustc.edu.cn/2020/daliy_report"</span>resp<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以显式地设置url和headers<br>这里通过自己写headers来伪装成浏览器访问，避开反爬虫检测</p><p>此外HTTP还要其它请求，在此按住不表</p><h4 id="会话对象"><a href="#会话对象" class="headerlink" title="会话对象"></a>会话对象</h4><p>服务器通过session来区分不同的用户请求，requests.Session对象就是模拟这种操作的，可以跨请求保持一些参数————比如不需要每次切换页面之后都要重新登录。requests.Session对象也可以用上面的那些方法</p><h3 id="BeautifulSoup库"><a href="#BeautifulSoup库" class="headerlink" title="BeautifulSoup库"></a>BeautifulSoup库</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/">https://www.crummy.com/software/BeautifulSoup/</a></p><p>Beautiful Soup 提供一些简单的、python 式的函数用来处理导航、搜索、修改分析树等功能。在爬虫中主要用来提取出 HTML 标签中的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> login<span class="token punctuation">.</span>result<span class="token punctuation">.</span>text        data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">,</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"_token"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Beautiful Soup 将复杂 HTML 文档转换成一个复杂的树形结构，每个节点都是 Python 对象，所有对象可以归纳为 4 种:</p><ul><li>Tag</li><li>NavigableString</li><li>BeautifulSoup</li><li>Comment</li></ul><p>详细用法可以看这篇：<br><a href="https://cuiqingcai.com/1319.html">https://cuiqingcai.com/1319.html</a></p><h2 id="再加一个功能"><a href="#再加一个功能" class="headerlink" title="再加一个功能"></a>再加一个功能</h2><p>实际上自动健康打卡在学校并不是刚需（几个月不打卡都不会有事），但是自动出校报备却是刚需：每过一周就要报备出校一次，否则一卡通会无法解锁门禁系统。这个功能和前面的健康打卡很像：</p><h3 id="按下按钮？"><a href="#按下按钮？" class="headerlink" title="按下按钮？"></a>按下按钮？</h3><img src="8.jpg" alt="html"><p>Requests库通过post模拟点击“提交申请”，但是网站有一个“本人承诺”的 <code>checkbox</code> 如果不点击它，则不能点击“提交申请”。它们之间的逻辑是以脚本的形式写在html文件里面的：</p><img src="9.jpg" alt="script"><p>会不会非得按下那个 <code>checkbox</code> 之后，才能成功post呢？</p><p>结论是，<strong>不用</strong>，只要知道往哪个url里面post就行了</p><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">start_date <span class="token operator">=</span> date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> start_date<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            end_date <span class="token operator">=</span> start_date <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>            start_date <span class="token operator">=</span> start_date<span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>            end_date <span class="token operator">=</span> end_date<span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>                       data2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"_token"</span><span class="token punctuation">:</span> token2<span class="token punctuation">,</span>                <span class="token string">"start_date"</span><span class="token punctuation">:</span> start_date<span class="token punctuation">,</span>                <span class="token string">"end_date"</span><span class="token punctuation">:</span> end_date            <span class="token punctuation">&#125;</span>            headers2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">&#125;</span>            url2 <span class="token operator">=</span> <span class="token string">"https://weixine.ustc.edu.cn/2020/apply/daliy/post"</span>            resp2 <span class="token operator">=</span> login<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url2<span class="token punctuation">,</span> data<span class="token operator">=</span>data2<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先调用date库查看当日日期，如果是周三，就在健康打卡之后进行出校报备（因为出校报备一周一次就够了）</p><img src="7.jpg" alt="post data"><p>依照抓到的包的形式自己写一个 <code>data2</code> post上去，post的目标 <code>url2</code> 也是在网页html中可以找到</p><p>但是这样并不能成功报备，只能合理怀疑 <code>token</code> 有问题了，我之前认为它和健康打卡post的 <code>token</code> 一样，再次用BeautifulSoup找出当前的 <code>token</code> ，结果发现和之前一样</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> login<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://weixine.ustc.edu.cn/2020/apply/daliy'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                   data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span>                   soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>                   token <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"_token"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>                   token2 <span class="token operator">=</span> token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么就是headers的问题了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>               <span class="token string">'authority'</span><span class="token punctuation">:</span> <span class="token string">'weixine.ustc.edu.cn'</span><span class="token punctuation">,</span>               <span class="token string">'upgrade-insecure-requests'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>               <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/html; charset=UTF-8'</span><span class="token punctuation">,</span>               <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36'</span><span class="token punctuation">,</span>               <span class="token string">'accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span><span class="token punctuation">,</span>               <span class="token string">'referer'</span><span class="token punctuation">:</span> <span class="token string">'https://weixine.ustc.edu.cn/2020/home'</span><span class="token punctuation">,</span>               <span class="token string">'accept-language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>               <span class="token string">'cookie'</span><span class="token punctuation">:</span> <span class="token string">"PHPSESSID="</span> <span class="token operator">+</span> login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PHPSESSID"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";XSRF-TOKEN="</span> <span class="token operator">+</span> login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"XSRF-TOKEN"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";laravel_session="</span> <span class="token operator">+</span> login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"laravel_session"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上headers写多少，写什么内容都不是必须的，本着言多必失的原则，将它缩短一点，只保留可能被用来反爬虫检测的部分：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36'</span><span class="token punctuation">,</span>                <span class="token string">'cookie'</span><span class="token punctuation">:</span> <span class="token string">"PHPSESSID="</span> <span class="token operator">+</span> login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PHPSESSID"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";XSRF-TOKEN="</span> <span class="token operator">+</span> login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"XSRF-TOKEN"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";laravel_session="</span> <span class="token operator">+</span> login<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"laravel_session"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果就成功了！</strong><br>说明还是headers的某条参数的问题</p><h3 id="检测是否成功"><a href="#检测是否成功" class="headerlink" title="检测是否成功"></a>检测是否成功</h3><p>打卡之后应该检测是否成功，就是到 <a href="https://weixine.ustc.edu.cn/2020/apply_total">https://weixine.ustc.edu.cn/2020/apply_total</a> 页面中查看最后一次报备时间：</p><img src="10.jpg" alt="check it"><p>具体来说，要用Requests库get网页html文件，再用BeautifulSoup库解析文件，并且用re库进行正则表达式匹配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> login<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://weixine.ustc.edu.cn/2020/apply_total"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>context <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"202[0-9]-[0-9]&#123;2&#125;-[0-9]&#123;2&#125; [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面就在BeautifulSoup找到的table表格中寻找满足pattern条件的<strong>第一个字符串</strong>，那就是最近一次打卡时间，并与现在时间作差值，如果在最近（两分钟内）申报过，那么就视为成功</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>token<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                date1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>token<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Latest apply: "</span> <span class="token operator">+</span> date1<span class="token punctuation">)</span>                date1 <span class="token operator">=</span> date1 <span class="token operator">+</span> <span class="token string">" +0800"</span>                reporttime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>date1<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S %z"</span><span class="token punctuation">)</span>                timenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                delta <span class="token operator">=</span> timenow <span class="token operator">-</span> reporttime                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; second(s) before."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>delta<span class="token punctuation">.</span>seconds<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> delta<span class="token punctuation">.</span>seconds <span class="token operator">&lt;</span> <span class="token number">120</span><span class="token punctuation">:</span>                        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Report FAILED!"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Report SUCCESSFUL!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>至此，自动健康打卡和出门申报功能就齐全了</strong></p><h3 id="那么，在哪里可以用到呢？"><a href="#那么，在哪里可以用到呢？" class="headerlink" title="那么，在哪里可以用到呢？"></a>那么，在哪里可以用到呢？</h3><p>实际上自动健康打卡是一个灰色地带，能不能用还是个问题<br>源码发布在 <a href="https://github.com/Baorunhui/USTC-ncov-AutoReport">https://github.com/Baorunhui/USTC-ncov-AutoReport</a><br>再次感谢我借鉴学习的<strong>xbb1973</strong>和<strong>Kobe972</strong>的代码</p><h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><p>登录网站的验证往往是个大问题，本次健康打卡平台的验证码实在是容易识别，不过别的平台就不是这样了</p><p>参考 <a href="https://blog.csdn.net/weizhen11/article/details/102509230/">https://blog.csdn.net/weizhen11/article/details/102509230/</a> 使用pyppeteer库可以实现更加强大的功能 </p><ul><li><p>一：淘宝验证码 拖动滑块</p><ul><li><p>(1) 淘宝的验证码验证模块会检测浏览器环境，要注入JS ；</p></li><li><p>(2) 尽可能模拟用户操作，随机数减慢 Pyppeteer 的执行速度</p></li></ul></li><li><p>二：12306验证码</p><ul><li>对接打码平台是比较不错的选择；原理就是把验证码图片以字节的方式发给他们，返回一个字符串，例如：183,68|193,161;<br>比如超级鹰打码平台API:chaojiying.py</li></ul></li></ul><p>不过像打码平台这个是不是灰色产业，我就不清楚了</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github使用指南</title>
      <link href="/2022/02/08/how-to-use-github/"/>
      <url>/2022/02/08/how-to-use-github/</url>
      
        <content type="html"><![CDATA[<h1 id="Github使用指南"><a href="#Github使用指南" class="headerlink" title="Github使用指南"></a>Github使用指南</h1><p>本文希望以简洁易懂的形式介绍Github的各种使用方法和功能</p><p>详细请阅读官方文档</p><h2 id="一、如何稳定地上Github"><a href="#一、如何稳定地上Github" class="headerlink" title="一、如何稳定地上Github"></a>一、如何稳定地上Github</h2><h2 id="二、术语"><a href="#二、术语" class="headerlink" title="二、术语"></a>二、术语</h2><p><strong>Repository</strong>：仓库，存放项目的地方</p><p><strong>Issues</strong>：问题</p><p><strong>Star</strong>：点赞</p><p><strong>Fork</strong>：拉分支，在一个项目的基础上修改时，通过Fork这个项目，复制一个完成相同且独立的项目到我们的 GitHub 账号之中。之后就可以在自己复制的项目中修改了。</p><p><strong>Pull Request</strong>：提交请求，Fork完一个项目并修改后，可以对原项目的拥有者提出一个Pull请求，审核完毕之后，修改就会合并到原项目中</p><p><strong>Merge</strong>：合并，即上述的合并</p><p><strong>Watch</strong>：观察，Watch了一个项目之后，能在第一时候收到该项目的更新通知。</p><h2 id="三、Git常用使用命令"><a href="#三、Git常用使用命令" class="headerlink" title="三、Git常用使用命令"></a>三、Git常用使用命令</h2><p>Github是基于版本控制系统Git的，本文不介绍怎么装<br>（本文基于git version 2.34.1.windows.1，详情请查看官方使用文档）</p><p>打开一个文件夹，右键Git Bash Here，可以打开Git Bash命令行窗口，下面所有操作都是在此窗口进行：</p><p>首先应该做的是让Git认识你，输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your Name Comes Here"</span><span class="token function">git</span> config --global user.email you@yourdomain.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>git init</strong>：初始化Git仓库，将当前文件夹变成空的仓库（repository）</p><p><strong>git status</strong>：查看仓库状态</p><p><strong>git add file1 file2 file3</strong>：将位于此文件夹的若干文件加入临时缓冲区中</p><p><strong>git commit -m “some_information”</strong>：将临时缓冲区的文件提交到仓库，并且记录一则信息</p><p><strong>git commit -a</strong>：跳过临时缓冲区，直接将原有文件的所有改动提交到仓库，<em>注意：这不会提交新文件</em></p><p><strong>git log</strong>：打印提交日志</p><p><strong>git branch</strong>：查看仓库分支情况，在分支名前通过*表明当前位置</p><p><strong>git branch newBranchName</strong>：建立新分支newBranchName</p><p><strong>git checkout anotherBranchName</strong>：切换到anotherBranchName分支</p><p><strong>git checkout -b newBranchName</strong>：建立新分支newBranchName的同时切换到该分支</p><p><strong>git merge anotherBranchName</strong>：将anotherBranchName分支与当前所在分支合并</p><p><strong>git branch -d anotherBranchName &amp; git branch -D anotherBranchName</strong>：将anotherBranchName分支删除，如果它未与master分支合并，则前者指令无法删除，需要后者指令强制删除</p><p><strong>git help -a</strong>：git 指令简短说明</p><h2 id="四、通过Git访问Github"><a href="#四、通过Git访问Github" class="headerlink" title="四、通过Git访问Github"></a>四、通过Git访问Github</h2><p>假设已经完成ssh绑定，这里仅介绍用法</p><p>在Github网站的仓库页面中选择code，复制如下内容（就是当前网址加后缀.git）<br><img src="1.jpg" alt="code clone"  /></p><p><strong>git clone <a href="https://github.com/userName/repoName.git">https://github.com/userName/repoName.git</a></strong>：<br>将userName的repoName复制到本地（位置即是当前文件夹），此后就可以在本地进行修改</p><p><strong>git remote add whateverName <a href="https://github.com/userName/repoName.git">https://github.com/userName/repoName.git</a></strong>：<br>在本地init一个新仓库之后，将其关联一个命名为whateverName（一般命名为origin，<em>注意：这个和repoName无关</em>）的远程仓库，它的地址是<a href="https://github.com/userName/repoName.git">https://github.com/userName/repoName.git</a></p><p><strong>git remote -v</strong>:<br>查看已关联的远程仓库情况</p><p><strong>git pull whateverName master</strong>：同步whateverName远程仓库和本地仓库的master分支</p><p><strong>git push whateverName master</strong>：将本地仓库提交到你的whateverName远程仓库master分支</p><h2 id="五、Gitee下载"><a href="#五、Gitee下载" class="headerlink" title="五、Gitee下载"></a>五、Gitee下载</h2><p>由于Github下载速度感人，可以通过国内的代码托管平台Gitee导入Github平台的仓库<br><a href="https://gitee.com/projects/import/url">https://gitee.com/projects/import/url</a><br>然后再pull或者clone<br><img src="2.jpg" alt="gitee import"  /></p><p>也可以用Git访问Gitee，和通过Git访问Github同理，只是需要<strong>git remote add</strong>一个新的远程仓库，并且在push和pull时指定那个仓库即可</p><h2 id="六、Actions"><a href="#六、Actions" class="headerlink" title="六、Actions"></a>六、Actions</h2><p>参照<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a><br>GitHub 允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用，这就是GitHub Actions<br>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows目录，可以通过它配置任务触发条件、虚拟机环境、运行步骤……</p><h2 id="通过Github写博客"><a href="#通过Github写博客" class="headerlink" title="通过Github写博客"></a>通过Github写博客</h2><p>Github提供pages服务，它独立地运行在<a href="http://github.io">http://github.io</a> 域名下<br>创建以 username.github.io 命名的仓库，在里面储存html等文件，就可以生成同域名的网页了（打开速度感人）<br>以本网站为例</p><ul><li><strong>下载node.js</strong>， 脚本语言JavaScript需要一个解析器才能运行，写入html的js语言，浏览器是它的解析器；而对于需要独立运行的JS，nodejs就是一个解析器<br>运行在node.js中的js的用途是操作磁盘文件或搭建http服务器</li><li><strong>通过npm安装模块</strong>，npm是和node.js一起下载的，npm就是JavaScript的包管理工具。类似python中的pip。下面将用它安装hexo等等组件</li><li><strong>通过hexo用markdown语法写html</strong>，相比html，markdown好写得多，hexo是高效的静态站点生成框架，可以直接用markdown语法写博客，而忽略网页的其它细节</li><li><strong>个性化设置</strong>，可以继续安装其它插件，比如本博客的主题hexo-theme-matery</li><li><strong>绑定github</strong>，直到这步，生成的网页都是本地的，通过拓展hexo-deployer-git就可以将生成的html文件上传到username.github.io仓库中，从而使用github的pages服务</li></ul>]]></content>
      
      
      <categories>
          
          <category> how-to系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello_world</title>
      <link href="/2022/01/20/hello-world/"/>
      <url>/2022/01/20/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎！！！"><a href="#欢迎！！！" class="headerlink" title="欢迎！！！"></a>欢迎！！！</h1><p>想着什么时候开始都不算晚，我终于在大二的寒假把自己的博客搭出来了！</p><p><em>筚路蓝缕，以启山林</em></p><p>之后的文章再见吧！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

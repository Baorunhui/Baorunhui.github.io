<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自动健康打卡</title>
      <link href="/2022/02/12/auto-report/"/>
      <url>/2022/02/12/auto-report/</url>
      
        <content type="html"><![CDATA[<h1 id="自动健康打卡"><a href="#自动健康打卡" class="headerlink" title="自动健康打卡"></a>自动健康打卡</h1><p>基于Github仓库：<a href="https://github.com/xbb1973/USTC-ncov-AutoReport">https://github.com/xbb1973/USTC-ncov-AutoReport</a></p><p>fork别人的仓库然后改改配置文件，然后通过Github的actions功能实现定时打卡<br>十分钟完事<br>结果workflows在登录那一步就失败了：</p><img src="1.png" alt="login failed"><p>原来这个版本不能识别验证码，而它的workflows是在github提供的ubuntu虚拟机上跑的，在校外网络环境登录时必须填写验证码</p><p>可以使用自己的运行器跑，正好学校vlab提供了ubuntu虚拟机，并且是校内网络环境，不需要填验证码…………</p><p>但是为什么不自己在虚拟机上写一个python自动打卡程序呢？或者找个办法识别验证码</p><p>找到了另一个人在原先版本上做出的改进：<a href="https://github.com/Kobe972/USTC-ncov-AutoReport">https://github.com/Kobe972/USTC-ncov-AutoReport</a> 因为网站的验证码比较简单，所以直接调用pytesseract库，就能识别验证码了</p><p>虽然能登录进去了，但是不能成功打卡。如图：检验上次打卡时间可知</p><img src="3.jpg" alt="report failed"><p>最后发现是data格式问题，每次健康上报时提交的信息参数就是data.json，但是原版本和现在版本的内容并不一样</p><p>原版本data.json<br><img src="4.jpg" alt="pre data"><br>按照这个版本上报并不能成功</p><p>在浏览器里点击确认上报，通过F12开发者工具抓包，点击抓到的 daliy_report 请求，在 Headers 下面找到 Form Data<br><img src="5.jpg" alt="post data"><br>按照这个格式修改data.json就可以了</p><img src="6.jpg" alt="success">]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github使用指南</title>
      <link href="/2022/02/08/how-to-use-github/"/>
      <url>/2022/02/08/how-to-use-github/</url>
      
        <content type="html"><![CDATA[<p>&lt;!–&gt;<br><img src="dog.jpg" alt="相对路径图片" style="zoom:33%;" /></p><p>&lt;!–&gt;</p><h1 id="Github使用指南"><a href="#Github使用指南" class="headerlink" title="Github使用指南"></a>Github使用指南</h1><p>本文希望以简洁易懂的形式介绍Github的各种使用方法和功能</p><p>详细请阅读官方文档</p><h2 id="一、如何稳定地上Github"><a href="#一、如何稳定地上Github" class="headerlink" title="一、如何稳定地上Github"></a>一、如何稳定地上Github</h2><h2 id="二、术语"><a href="#二、术语" class="headerlink" title="二、术语"></a>二、术语</h2><p><strong>Repository</strong>：仓库，存放项目的地方</p><p><strong>Issues</strong>：问题</p><p><strong>Star</strong>：点赞</p><p><strong>Fork</strong>：拉分支，在一个项目的基础上修改时，通过Fork这个项目，复制一个完成相同且独立的项目到我们的 GitHub 账号之中。之后就可以在自己复制的项目中修改了。</p><p><strong>Pull Request</strong>：提交请求，Fork完一个项目并修改后，可以对原项目的拥有者提出一个Pull请求，审核完毕之后，修改就会合并到原项目中</p><p><strong>Merge</strong>：合并，即上述的合并</p><p><strong>Watch</strong>：观察，Watch了一个项目之后，能在第一时候收到该项目的更新通知。</p><h2 id="三、Git常用使用命令"><a href="#三、Git常用使用命令" class="headerlink" title="三、Git常用使用命令"></a>三、Git常用使用命令</h2><p>Github是基于版本控制系统Git的，本文不介绍怎么装<br>（本文基于git version 2.34.1.windows.1，详情请查看官方使用文档）</p><p>打开一个文件夹，右键Git Bash Here，可以打开Git Bash命令行窗口，下面所有操作都是在此窗口进行：</p><p>首先应该做的是让Git认识你，输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your Name Comes Here"</span><span class="token function">git</span> config --global user.email you@yourdomain.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>git init</strong>：初始化Git仓库，将当前文件夹变成空的仓库（repository）</p><p><strong>git status</strong>：查看仓库状态</p><p><strong>git add file1 file2 file3</strong>：将位于此文件夹的若干文件加入临时缓冲区中</p><p>**git commit -m “some information”**：将临时缓冲区的文件提交到仓库，并且记录一则信息</p><p><strong>git commit -a</strong>：跳过临时缓冲区，直接将原有文件的所有改动提交到仓库，<em>注意：这不会提交新文件</em></p><p><strong>git log</strong>：打印提交日志</p><p><strong>git branch</strong>：查看仓库分支情况，在分支名前通过*表明当前位置</p><p><strong>git branch newBranchName</strong>：建立新分支newBranchName</p><p><strong>git checkout anotherBranchName</strong>：切换到anotherBranchName分支</p><p><strong>git checkout -b newBranchName</strong>：建立新分支newBranchName的同时切换到该分支</p><p><strong>git merge anotherBranchName</strong>：将anotherBranchName分支与当前所在分支合并</p><p><strong>git branch -d anotherBranchName &amp; git branch -D anotherBranchName</strong>：将anotherBranchName分支删除，如果它未与master分支合并，则前者指令无法删除，需要后者指令强制删除</p><p><strong>git help -a</strong>：git 指令简短说明</p><h2 id="四、通过Git访问Github"><a href="#四、通过Git访问Github" class="headerlink" title="四、通过Git访问Github"></a>四、通过Git访问Github</h2><p>假设已经完成ssh绑定，这里仅介绍用法</p><p>在Github网站的仓库页面中选择code，复制如下内容（就是当前网址加后缀.git）<br><img src="1.jpg" alt="code clone"  /></p><p><strong>git clone <a href="https://github.com/userName/repoName.git">https://github.com/userName/repoName.git</a></strong>：<br>将userName的repoName复制到本地（位置即是当前文件夹），此后就可以在本地进行修改</p><p><strong>git remote add whateverName <a href="https://github.com/userName/repoName.git">https://github.com/userName/repoName.git</a></strong>：<br>在本地init一个新仓库之后，将其关联一个命名为whateverName（一般命名为origin，<em>注意：这个和repoName无关</em>）的远程仓库，它的地址是<a href="https://github.com/userName/repoName.git">https://github.com/userName/repoName.git</a></p><p><strong>git pull whateverName master</strong>：同步whateverName远程仓库和本地仓库的master分支</p><p><strong>git push whateverName master</strong>：将本地仓库提交到你的whateverName远程仓库master分支</p><h2 id="五、Gitee下载"><a href="#五、Gitee下载" class="headerlink" title="五、Gitee下载"></a>五、Gitee下载</h2><p>由于Github下载速度感人，可以通过国内的代码托管平台Gitee导入Github平台的仓库<br><a href="https://gitee.com/projects/import/url">https://gitee.com/projects/import/url</a><br>然后再pull或者clone<br><img src="2.jpg" alt="gitee import"  /></p><p>也可以用Git访问Gitee，和通过Git访问Github同理，只是需要<strong>git remote add</strong>一个新的远程仓库，并且在push和pull时指定那个仓库即可</p><h2 id="六、Actions"><a href="#六、Actions" class="headerlink" title="六、Actions"></a>六、Actions</h2><p>参照<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a><br>GitHub 允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用，这就是GitHub Actions<br>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows目录，可以通过它配置任务触发条件、虚拟机环境、运行步骤……</p><h2 id="通过Github写博客"><a href="#通过Github写博客" class="headerlink" title="通过Github写博客"></a>通过Github写博客</h2><p>Github提供pages服务，它独立地运行在<a href="http://github.io/">http://github.io</a> 域名下<br>创建以 username.github.io 命名的仓库，在里面储存html等文件，就可以生成同域名的网页了（打开速度感人）<br>以本网站为例</p><ul><li><strong>下载node.js</strong>， 脚本语言JavaScript需要一个解析器才能运行，写入html的js语言，浏览器是它的解析器；而对于需要独立运行的JS，nodejs就是一个解析器<br>运行在node.js中的js的用途是操作磁盘文件或搭建http服务器</li><li><strong>通过npm安装模块</strong>，npm是和node.js一起下载的，npm就是JavaScript的包管理工具。类似python中的pip。下面将用它安装hexo等等组件</li><li><strong>通过hexo用markdown语法写html</strong>，相比html，markdown好写得多，hexo是高效的静态站点生成框架，可以直接用markdown语法写博客，而忽略网页的其它细节</li><li><strong>个性化设置</strong>，可以继续安装其它插件，比如本博客的主题hexo-theme-matery</li><li><strong>绑定github</strong>，直到这步，生成的网页都是本地的，通过拓展hexo-deployer-git就可以将生成的html文件上传到username.github.io仓库中</li></ul>]]></content>
      
      
      <categories>
          
          <category> how-to系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello_world</title>
      <link href="/2022/01/20/hello-world/"/>
      <url>/2022/01/20/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎！！！"><a href="#欢迎！！！" class="headerlink" title="欢迎！！！"></a>欢迎！！！</h1><p>想着什么时候开始都不算晚，我终于在大二的寒假把自己的博客搭出来了！</p><p><em>筚路蓝缕，以启山林</em></p><p>之后的文章再见吧！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
